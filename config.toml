# RequestX Configuration File
# Performance and runtime settings for HTTP client and runtime
# All timeout values are in seconds, sizes are in bytes unless otherwise specified

[client]
# HTTP Connection Pool Settings
# Controls how connections are managed and reused for better performance

# pool_idle_timeout_secs: How long (in seconds) to keep idle connections alive
# before closing them. Longer timeouts reduce connection overhead but use more memory.
# Range: 30-300 seconds. Default: 90
pool_idle_timeout_secs = 90

# pool_max_idle_per_host: Maximum number of idle connections to keep per host
# Higher values improve performance for repeated requests to the same host but use more memory.
# Range: 10-1000 connections. Default: 512
pool_max_idle_per_host = 1024

# HTTP/2 Protocol Settings
# Fine-tune HTTP/2 behavior for optimal performance

# http2_only: Force all connections to use HTTP/2 protocol only
# true = HTTP/2 only, false = negotiate HTTP/1.1 or HTTP/2. Default: false
http2_only = false

# http2_keep_alive_interval_secs: Interval (in seconds) between HTTP/2 ping frames
# to keep connections alive. Prevents connection drops through firewalls/proxies.
# Range: 10-120 seconds. Default: 30
http2_keep_alive_interval_secs = 30

# http2_keep_alive_timeout_secs: Timeout (in seconds) waiting for ping response
# If no response within this time, connection is considered dead and closed.
# Range: 5-60 seconds. Default: 10
http2_keep_alive_timeout_secs = 10

# http2_initial_stream_window_size: Initial flow control window size (in bytes) per HTTP/2 stream
# Controls how much data can be sent before waiting for acknowledgment.
# Larger values improve throughput but use more memory. Default: 65536 (64KB)
http2_initial_stream_window_size = 65536

# http2_initial_connection_window_size: Initial flow control window size (in bytes) per HTTP/2 connection
# Controls total data flow across all streams in a connection.
# Should be larger than stream window size. Default: 1048576 (1MB)
http2_initial_connection_window_size = 1048576

[runtime]
# Tokio Async Runtime Settings
# Controls the underlying async runtime behavior and resource allocation

# worker_threads: Number of worker threads for async tasks
# 0 = auto-detect (CPU cores * 2, clamped between 4-16)
# Manual values: 1-64 threads. Default: 0 (auto)
worker_threads = 16

# max_blocking_threads: Maximum threads for blocking operations (file I/O, DNS, etc.)
# Higher values allow more concurrent blocking operations but use more system resources.
# Range: 10-2000 threads. Default: 512
max_blocking_threads = 512

# thread_name: Prefix for thread names (helps with debugging and profiling)
# Threads will be named: "<prefix>-<number>". Default: "requestx-worker"
thread_name = "requestx-worker"

# thread_stack_size: Stack size (in bytes) for each worker thread
# Larger stacks support deeper recursion but use more memory per thread.
# Range: 131072-8388608 bytes (128KB-8MB). Default: 524288 (512KB)
thread_stack_size = 1048576  # 1024 * 1024