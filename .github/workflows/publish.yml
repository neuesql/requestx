name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Publish to Test PyPI instead of PyPI'
        required: false
        default: false
        type: boolean

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            arch: x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            arch: aarch64
          # macOS builds (universal2 for both x86_64 and arm64)
          - os: macos-latest
            target: universal2-apple-darwin
            arch: universal2
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x86_64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            arch: aarch64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install cross-compilation tools (Linux aarch64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Install maturin (Linux)
      if: runner.os == 'Linux'
      run: uv tool install maturin[patchelf]

    - name: Install maturin (Non-Linux)
      if: runner.os != 'Linux'
      run: uv tool install maturin

    - name: Build wheels
      run: |
        uv run maturin build --release --strip --target ${{ matrix.target }} --out dist
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.arch }}
        path: dist

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install maturin
      run: uv tool install maturin[patchelf]

    - name: Build sdist
      run: uv run maturin sdist --out dist

    - name: Upload sdist
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist

  publish:
    name: Publish to PyPI
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    environment:
      name: PROD
      url: https://pypi.org/p/requestx

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist

    - name: Flatten artifacts
      run: |
        mkdir -p final-dist
        find dist -name '*.whl' -exec cp {} final-dist/ \;
        find dist -name '*.tar.gz' -exec cp {} final-dist/ \;
        ls -la final-dist/
        echo "Built wheels:"
        ls -la final-dist/*.whl || echo "No wheels found"
        echo "Built source distributions:"
        ls -la final-dist/*.tar.gz || echo "No source distributions found"

    - name: Publish to Test PyPI
      if: github.event.inputs.test_pypi == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        packages-dir: final-dist/
        password: ${{ secrets.PYPI_TOKEN }}

    - name: Publish to PyPI
      if: github.event.inputs.test_pypi != 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: final-dist/
        password: ${{ secrets.PYPI_TOKEN }}